#!/usr/bin/env python
PACKAGE = "velo2cam_calibration"

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("reset", bool_t, 0, "Reset cumulative cloud", False)

plane = gen.add_group("Plane segmentation")
plane.add("parallel_axis_x", double_t, 0, "x coord", 0, 0, 1)
plane.add("parallel_axis_y", double_t, 0, "y coord", 0, 0, 1)
plane.add("parallel_axis_z", double_t, 0, "z coord", 1, 0, 1)
plane.add("angle_threshold_to_parallel", double_t, 0, "Angle threshold for plane to parallel axis", 0.55, 0, pi/2)
plane.add("normal_x", double_t, 0, "x coord", 1, 0, 1)
plane.add("normal_y", double_t, 0, "y coord", 0, 0, 1)
plane.add("normal_z", double_t, 0, "z coord", 0, 0, 1)
plane.add("angle_threshold_to_normal", double_t, 0, "Angle threshold for plane to normal", pi/4, 0, pi/2)
plane.add("min_num_points_per_ring", int_t, 0, "Minimum number of points per ring for a valid board plane", 10, 1, 100)
plane.add("min_num_rings", int_t, 0, "Minimum numer of rings for a valid board plane", 10, 1, 100)

edges = gen.add_group("Edge detection")
edges.add("passthrough_radius_min", double_t, 0, "Min radius for passthrough", 1.0, 0, 100)
edges.add("passthrough_radius_max", double_t, 0, "Max radius for passthrough", 100, 0, 100)
edges.add("edge_threshold", double_t, 0, "Max distance between consecutive points", 0.1, 0, 1)
edges.add("max_plane_distance", double_t, 0, "Max distance of a point to the estimated plane", 0.2, 0, 0.5)

circles = gen.add_group("Circle detection")
circles.add("circle_radius", double_t, 0, "Radius of pattern's circles", 0.12, 0, 1)
circles.add("accumulate", bool_t, 0, "Accumulate centers", True)

exit(gen.generate(PACKAGE, "velo2cam_calibration", "Laser"))
